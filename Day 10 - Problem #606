606. Construct String from Binary Tree

You need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way.

The null node needs to be represented by empty parenthesis pair "()". And you need to omit all the empty parenthesis pairs that don't affect the one-to-one mapping relationship between the string and the original binary tree.

Example 1:
Input: Binary tree: [1,2,3,4]
       1
     /   \
    2     3
   /    
  4     

Output: "1(2(4))(3)"

Explanation: Originallay it needs to be "1(2(4)())(3()())", 
but you need to omit all the unnecessary empty parenthesis pairs. 
And it will be "1(2(4))(3)".
Example 2:
Input: Binary tree: [1,2,3,null,4]
       1
     /   \
    2     3
     \  
      4 

Output: "1(2()(4))(3)"

Explanation: Almost the same as the first example, 
except we can't omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.



====================================================================================================



Thought: uses a recursive function. Base cases are when the node does not contain anything, return nothing, and if the node is at the end, return its value. If the node has a 
right node but its left node is empty, return a "()" for the left node and then process the right node. If the node only has a left node, go to the left node. If the node has 
both left and right node, then go to the left and right node respectively.
Code: Python
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def tree2str(self, t: TreeNode) -> str:
        if t == None:
            return ""
        
        if t.left == None and t.right == None:
            return str(t.val)
        
        if t.left == None:
            return str(t.val) + "()" + "(" + self.tree2str(t.right) + ")"
        
        if t.right == None:
            return str(t.val) + "(" + self.tree2str(t.left) + ")"
        
        
        return str(t.val) + "(" + self.tree2str(t.left) + ")" + "(" + self.tree2str(t.right) + ")"



====================================================================================================



Thought: From leetcode discussion. Same method but used a variable to store the output
Code: Python
class Solution:
    def tree2str(self, t: TreeNode) -> str:
        if t == None: return ""
        
        result = str(t.val)
        
        if t.left:
            result += "(" + self.tree2str(t.left) + ")"
            if t.right:
                result += "(" + self.tree2str(t.right) + ")"
        elif t.right:
            result += "()" + "(" + self.tree2str(t.right) + ")"
        
        return result
