521. Longest Uncommon Subsequence I

Given two strings, you need to find the longest uncommon subsequence of this two strings. The longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be any subsequence of the other string.

A subsequence is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.

The input will be two strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn't exist, return -1.

 

Example 1:

Input: a = "aba", b = "cdc"
Output: 3
Explanation: The longest uncommon subsequence is "aba", 
because "aba" is a subsequence of "aba", 
but not a subsequence of the other string "cdc".
Note that "cdc" can be also a longest uncommon subsequence.
Example 2:

Input: a = "aaa", b = "bbb"
Output: 3
Example 3:

Input: a = "aaa", b = "aaa"
Output: -1
 

Constraints:

Both strings' lengths will be between [1 - 100].
Only letters from a ~ z will appear in input strings.



====================================================================================================



Thought: Check from the longest possible length to length 1, for each length, check every possible substring.
Code: Python
class Solution:
    def findLUSlength(self, a: str, b: str) -> int:
        if len(a) <= len(b):  # find out which input is longer and which one is shorter
            short = a
            long = b
        else:
            short = b
            long = a
        
        l = 0  # left pointer
        r = len(long)  # right pointer
        while l < r:  # loop through the input, each time the length of substring gets smaller by one
            while r <= len(long):  # check every possibility with that length of substring
                if short.find(long[l:r]) == -1:  # if the substring is uncommon, return the length
                    return len(long[l:r])
                
                l += 1
                r += 1
                
            r = len(long) - l
            l = 0
            
        return -1



====================================================================================================



Thought: Two possibilities: 1. two input strings are exactly the same; 2. input strings are not the same (even with one letter difference), return the longer input's length
Code: Python
class Solution:
    def findLUSlength(self, a: str, b: str) -> int:
        if a == b: return -1
        
        return max(len(a), len(b))
